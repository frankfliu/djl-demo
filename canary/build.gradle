plugins {
    id "java"
    id "application"
}

group "com.example"
version "1.0-SNAPSHOT"

def djlVersion = getEnv("DJL_VERSION", "0.11.0")
if (djlVersion == "") {
    djlVersion = "0.11.0"
}
def engine = getEnv("DJL_ENGINE", "mxnet-native-auto")
def os = getOsName()
def stagingRepo = getEnv("DJL_STAGING", null)

repositories {
    jcenter()
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/service/local/repositories/${stagingRepo}/content/"
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configure(this) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    apply from: file("${rootProject.projectDir}/../tools/gradle/formatter.gradle")
}

dependencies {
    implementation platform("ai.djl:bom:${djlVersion}")
    implementation "ai.djl:basicdataset"
    implementation "ai.djl:model-zoo"
    implementation "ai.djl:basicdataset"
    implementation "ai.djl:model-zoo"
    implementation("ai.djl:serving") {
        // avoid include engines at runtime
        exclude group: "ai.djl.mxnet", module: "mxnet-model-zoo"
        exclude group: "ai.djl.mxnet", module: "mxnet-engine"
        exclude group: "ai.djl.mxnet", module: "mxnet-native-auto"

        exclude group: "ai.djl.pytorch", module: "pytorch-model-zoo"
        exclude group: "ai.djl.pytorch", module: "pytorch-engine"
        exclude group: "ai.djl.pytorch", module: "pytorch-native-auto"

        exclude group: "ai.djl.tensorflow", module: "tensorflow-model-zoo"
        exclude group: "ai.djl.tensorflow", module: "tensorflow-engine"
        exclude group: "ai.djl.tensorflow", module: "tensorflow-native-auto"
    }

    implementation "ai.djl.aws:aws-ai"
    implementation "ai.djl.fasttext:fasttext-engine"
    implementation "ai.djl.hadoop:hadoop"
    implementation "ai.djl.sentencepiece:sentencepiece"

    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"

    implementation "ai.djl.onnxruntime:onnxruntime-engine"

    if (engine.startsWith("pytorch")) {
        implementation "ai.djl.pytorch:pytorch-model-zoo"
        if (engine.contains("-auto")) {
            implementation "ai.djl.pytorch:pytorch-native-auto"
        } else if (engine.contains("-precxx11")) {
            implementation "ai.djl.pytorch:pytorch-native-cpu-precxx11::${os}-x86_64"
        } else {
            implementation "ai.djl.pytorch:${engine}::${os}-x86_64"
        }
    } else if (engine.startsWith("tensorflow")) {
        implementation "ai.djl.tensorflow:tensorflow-model-zoo"
        if (engine.contains("-auto")) {
            implementation "ai.djl.tensorflow:tensorflow-native-auto"
        } else {
            implementation "ai.djl.tensorflow:${engine}::${os}-x86_64"
        }
    } else if (engine.startsWith("onnxruntime")) {
        implementation "ai.djl.pytorch:pytorch-engine"
        implementation "ai.djl.pytorch:pytorch-native-auto"
    } else if (engine.startsWith("paddlepaddle")) {
        implementation "ai.djl.paddlepaddle:paddlepaddle-model-zoo"
        if (engine.contains("-auto")) {
            implementation "ai.djl.paddlepaddle:paddlepaddle-native-auto"
        } else {
            implementation "ai.djl.paddlepaddle:${engine}::${os}-x86_64"
        }
        implementation "ai.djl.pytorch:pytorch-engine"
        implementation "ai.djl.pytorch:pytorch-native-auto"
    } else if (engine.startsWith("dlr")) {
        implementation "ai.djl.dlr:dlr-engine"
        if (engine.contains("-auto")) {
            implementation "ai.djl.dlr:dlr-native-auto"
        } else {
            implementation "ai.djl.dlr:${engine}::${os}-x86_64"
        }
        implementation "ai.djl.pytorch:pytorch-engine"
        implementation "ai.djl.pytorch:pytorch-native-auto"
    } else if (engine.startsWith("tflite")) {
        implementation "ai.djl.tflite:tflite-engine"
        if (engine.contains("-auto")) {
            implementation "ai.djl.tflite:${engine}"
        } else {
            implementation "ai.djl.tflite:${engine}::${os}-x86_64"
        }
    } else if (engine.startsWith("xgboost")) {
        implementation "ai.djl.ml.xgboost:xgboost"
    } else {
        implementation "ai.djl.mxnet:mxnet-model-zoo"
        if (engine.contains("-auto")) {
            implementation "ai.djl.mxnet:mxnet-native-auto"
        } else {
            implementation "ai.djl.mxnet:${engine}::${os}-x86_64"
        }
    }
}

application {
    mainClassName = System.getProperty("main", "ai.djl.canary.CanaryTest")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    systemProperty("disableProgressBar", "true")
}
tasks.distTar.enabled = false

static def getOsName() {
    String osName = System.getProperty("os.name")
    if (osName.startsWith("Win")) {
        return "win"
    } else if (osName.startsWith("Mac")) {
        return "osx"
    } else if (osName.startsWith("Linux")) {
        return "linux"
    } else {
        throw new GradleException("Unsupported os: " + osName)
    }
}

static def getEnv(String key, String defaultValue) {
    String value = System.getenv(key)
    return value == null ? defaultValue : value
}
